import { Collection } from "hanako-ts/dist-legacy/Collection";
import { jsPDFOptions } from 'jspdf';
import { PDFElement } from './PDFElement';
export declare type PageNumberOptions = {
    format: string;
    x: number;
    y: number;
    align: string;
};
export declare type HanakoPDFOptions = {
    fontPath: string;
    selector?: string;
    filename?: string;
    pageTop?: number;
    pageBottom?: number;
    displayMode?: string;
    pageNumberOptions?: PageNumberOptions;
    fontScaleFactorFix?: number;
    debug?: boolean;
};
export declare type PrintElementCallback = (element: PDFElement, pageTop: number) => void;
export declare class HanakoPDF {
    private static currentPageTop;
    private static displayMode;
    private static filename;
    private static fonts;
    private static hasBeenInitialized;
    private static jsPDF;
    private static pageFormat;
    private static pageWidth;
    private static printElementCallback;
    private static selector;
    private static _currentPage;
    private static _debug;
    private static _fontScaleFactor;
    private static _fontScaleFactorFix;
    private static _page;
    private static _pageCount;
    private static _pageBottom;
    private static _pageTop;
    private static _pageNumberOptions;
    private static _scaleFactor;
    private static _yReference;
    static init(options: HanakoPDFOptions): Promise<boolean>;
    static print(page: Collection, options: HanakoPDFOptions, target?: Collection, printElementCallback?: PrintElementCallback, jsPDFOptions?: jsPDFOptions): Promise<boolean>;
    static get debug(): boolean;
    static get page(): Collection;
    static get scaleFactor(): number;
    static get yReference(): number;
    static get pageBottom(): number;
    static get currentPage(): number;
    static get pageCount(): number;
    static get pageNumberOptions(): PageNumberOptions;
    static get fontScaleFactor(): number;
    private static transverse;
    private static printElement;
    private static pageBreak;
}
